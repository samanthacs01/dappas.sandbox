name: Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main    # dev enviroment (with change detection)
    tags:
      - 'rc-v*'  # staging enviroment (always build)
      - 'v*'     # production enviroment (always build)
    paths:
      - apps/**
      - iac/**

permissions:
  actions: read
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
        environment: ${{ steps.extract_env.outputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install the GCP CLI
        id: install_gcloud_cli
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Extract Environment
        id: extract_env
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "branch" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            REF_NAME="${GITHUB_REF_NAME}"
            echo "Tag name: $REF_NAME"
            if [[ "$REF_NAME" =~ ^rc-v[0-9.]+$ ]]; then
                echo "ENVIRONMENT=staging" >> $GITHUB_ENV
                echo "environment=staging" >> $GITHUB_OUTPUT
            elif [[ "$REF_NAME" =~ ^v[0-9.]+$ ]]; then
                echo "ENVIRONMENT=prod" >> $GITHUB_ENV
                echo "environment=prod" >> $GITHUB_OUTPUT
            else
                echo "❌ Tag name does not match expected pattern"
                exit 1
            fi
          else
            echo "❌ Unsupported ref type: ${GITHUB_REF_TYPE}"
            exit 1
          fi

  detect_changes:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      fe_changes: ${{ steps.check_frontend.outputs.fe_changes }}
      fe_tag: ${{ steps.check_frontend.outputs.fe_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if frontend changed
        id: check_frontend
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q 'apps/dappas-web'; then
            echo "::set-output name=fe_changes::true"
            echo "::set-output name=fe_tag::${{ github.sha }}"
          else
            echo "::set-output name=fe_changes::false"
            echo "::set-output name=fe_tag::latest"
          fi

  build_frontend:
    runs-on: ubuntu-latest
    needs: [setup, detect_changes]
    if: needs.detect_changes.outputs.fe_changes == 'true' || needs.setup.outputs.environment == 'staging' || needs.setup.outputs.environment == 'prod'
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install the GCP CLI
        uses: ./.github/actions/install-gcp-cli
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Login to artifact registry
        uses: ./.github/actions/login-artifact-registry

      - name: Debug environment and tag
        run: |
          echo "ENVIRONMENT=${ENVIRONMENT}"
          echo "Tag: us-docker.pkg.dev/${{ vars.GOOGLE_PROJECT }}/dappas/dappas-web-${ENVIRONMENT}:${{ github.sha }}"

      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t us-docker.pkg.dev/${{ vars.GOOGLE_PROJECT }}/dappas/dappas-web-${{ env.ENVIRONMENT }}:${{ github.sha }} -f apps/dappas-web/Dockerfile .
          docker tag us-docker.pkg.dev/${{ vars.GOOGLE_PROJECT }}/dappas/dappas-web-${{ env.ENVIRONMENT }}:${{ github.sha }} us-docker.pkg.dev/${{ vars.GOOGLE_PROJECT }}/dappas/dappas-web-${{ env.ENVIRONMENT }}:latest
          docker push us-docker.pkg.dev/${{ vars.GOOGLE_PROJECT }}/dappas/dappas-web-${{ env.ENVIRONMENT }}:${{ github.sha }}
          docker push us-docker.pkg.dev/${{ vars.GOOGLE_PROJECT }}/dappas/dappas-web-${{ env.ENVIRONMENT }}:latest

  terraform_deployment:
    runs-on: ubuntu-latest
    needs: [setup, detect_changes, build_frontend]
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    env:
        ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Authenticate the GCP CLI
        uses: ./.github/actions/install-gcp-cli
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set the Image Tags for Cloud Runs
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "staging" || "${{ env.ENVIRONMENT }}" == "prod" ]]; then
            sed -i "s/FRONTEND_TAG/${{ github.sha }}/g" iac/main.tf
          elif [[ "${{ needs.detect_changes.outputs.fe_changes }}" == "true" ]]; then
            sed -i "s/FRONTEND_TAG/${{ github.sha }}/g" iac/main.tf
          else
            sed -i "s/FRONTEND_TAG/latest/g" iac/main.tf
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.10.0"

      - name: Terraform Init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        working-directory: iac
        run: terraform init -upgrade

      - name: Debug Environment
        run: echo "ENVIRONMENT=${{ env.ENVIRONMENT }}"

      - name: Select or Create Terraform Workspace
        working-directory: iac
        run: |
          terraform workspace list
          terraform workspace select ${{ env.ENVIRONMENT }}
      
      - name: Terraform Plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        working-directory: iac
        run: |
          terraform plan -lock=false -out=tfplan 
      - name: Terraform Apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        working-directory: iac
        run: |
          terraform apply -auto-approve -lock=false 
