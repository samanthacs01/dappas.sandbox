// Code generated by MockGen. DO NOT EDIT.
// Source: selector.dev/dappas/internal/modules/ecommerce/usecases (interfaces: IShopifyInstallUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_install_shopify_usecase.go -package=mocks selector.dev/dappas/internal/modules/ecommerce/usecases IShopifyInstallUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	models "selector.dev/dappas/internal/modules/ecommerce/models"
)

// MockIShopifyInstallUseCase is a mock of IShopifyInstallUseCase interface.
type MockIShopifyInstallUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIShopifyInstallUseCaseMockRecorder
	isgomock struct{}
}

// MockIShopifyInstallUseCaseMockRecorder is the mock recorder for MockIShopifyInstallUseCase.
type MockIShopifyInstallUseCaseMockRecorder struct {
	mock *MockIShopifyInstallUseCase
}

// NewMockIShopifyInstallUseCase creates a new mock instance.
func NewMockIShopifyInstallUseCase(ctrl *gomock.Controller) *MockIShopifyInstallUseCase {
	mock := &MockIShopifyInstallUseCase{ctrl: ctrl}
	mock.recorder = &MockIShopifyInstallUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShopifyInstallUseCase) EXPECT() *MockIShopifyInstallUseCaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIShopifyInstallUseCase) Run(input *models.InstallInput) (*models.InstallOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", input)
	ret0, _ := ret[0].(*models.InstallOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockIShopifyInstallUseCaseMockRecorder) Run(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIShopifyInstallUseCase)(nil).Run), input)
}
