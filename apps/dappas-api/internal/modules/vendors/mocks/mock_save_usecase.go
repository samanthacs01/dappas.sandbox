// Code generated by MockGen. DO NOT EDIT.
// Source: selector.dev/dappas/internal/modules/vendors/usecase (interfaces: ISaveUseCase)
//
// Generated by this command:
//
//	mockgen --destination=../mocks/mock_save_usecase.go --package=mocks selector.dev/dappas/internal/modules/vendors/usecase ISaveUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	model "selector.dev/dappas/internal/modules/vendors/model"
)

// MockISaveUseCase is a mock of ISaveUseCase interface.
type MockISaveUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockISaveUseCaseMockRecorder
	isgomock struct{}
}

// MockISaveUseCaseMockRecorder is the mock recorder for MockISaveUseCase.
type MockISaveUseCaseMockRecorder struct {
	mock *MockISaveUseCase
}

// NewMockISaveUseCase creates a new mock instance.
func NewMockISaveUseCase(ctrl *gomock.Controller) *MockISaveUseCase {
	mock := &MockISaveUseCase{ctrl: ctrl}
	mock.recorder = &MockISaveUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISaveUseCase) EXPECT() *MockISaveUseCaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISaveUseCase) Run(input *model.SaveInput) (*model.SaveOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", input)
	ret0, _ := ret[0].(*model.SaveOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockISaveUseCaseMockRecorder) Run(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISaveUseCase)(nil).Run), input)
}
