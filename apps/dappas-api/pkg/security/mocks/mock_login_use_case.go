// Code generated by MockGen. DO NOT EDIT.
// Source: selector.dev/security/use_cases (interfaces: ILoginUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_login_use_case.go -package=mocks selector.dev/security/use_cases ILoginUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	model "selector.dev/security/model"
)

// MockILoginUseCase is a mock of ILoginUseCase interface.
type MockILoginUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockILoginUseCaseMockRecorder
	isgomock struct{}
}

// MockILoginUseCaseMockRecorder is the mock recorder for MockILoginUseCase.
type MockILoginUseCaseMockRecorder struct {
	mock *MockILoginUseCase
}

// NewMockILoginUseCase creates a new mock instance.
func NewMockILoginUseCase(ctrl *gomock.Controller) *MockILoginUseCase {
	mock := &MockILoginUseCase{ctrl: ctrl}
	mock.recorder = &MockILoginUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginUseCase) EXPECT() *MockILoginUseCaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockILoginUseCase) Run(input model.LoginInput) (*model.LoginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", input)
	ret0, _ := ret[0].(*model.LoginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockILoginUseCaseMockRecorder) Run(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockILoginUseCase)(nil).Run), input)
}
