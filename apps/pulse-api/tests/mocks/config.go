// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

// GetConStr provides a mock function with no fields
func (_m *Config) GetConStr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConStr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSecretKey provides a mock function with no fields
func (_m *Config) GetSecretKey() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSecretKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetTokenExpiration provides a mock function with no fields
func (_m *Config) GetTokenExpiration() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTokenExpiration")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsDevelopment provides a mock function with no fields
func (_m *Config) IsDevelopment() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDevelopment")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
