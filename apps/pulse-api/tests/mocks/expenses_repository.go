// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	expenses "selector.dev/pulse/internal/domain/expenses"
)

// IExpensesRepository is an autogenerated mock type for the IExpensesRepository type
type IExpensesRepository struct {
	mock.Mock
}

// CreateExpense provides a mock function with given fields: e, docs
func (_m *IExpensesRepository) CreateExpense(e *expenses.Expense, docs []expenses.ExpenseDoc) (*expenses.Expense, error) {
	ret := _m.Called(e, docs)

	if len(ret) == 0 {
		panic("no return value specified for CreateExpense")
	}

	var r0 *expenses.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(*expenses.Expense, []expenses.ExpenseDoc) (*expenses.Expense, error)); ok {
		return rf(e, docs)
	}
	if rf, ok := ret.Get(0).(func(*expenses.Expense, []expenses.ExpenseDoc) *expenses.Expense); ok {
		r0 = rf(e, docs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expenses.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(*expenses.Expense, []expenses.ExpenseDoc) error); ok {
		r1 = rf(e, docs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpense provides a mock function with given fields: id
func (_m *IExpensesRepository) DeleteExpense(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllExpenses provides a mock function with given fields: productions, months, from, to, limit, offset, sortBy
func (_m *IExpensesRepository) FindAllExpenses(productions *[]int, months *[]string, from string, to string, limit *int, offset *int, sortBy []struct {
	Field     string
	Direction string
}) (*[]expenses.Expense, *int64, error) {
	ret := _m.Called(productions, months, from, to, limit, offset, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for FindAllExpenses")
	}

	var r0 *[]expenses.Expense
	var r1 *int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*[]int, *[]string, string, string, *int, *int, []struct {
		Field     string
		Direction string
	}) (*[]expenses.Expense, *int64, error)); ok {
		return rf(productions, months, from, to, limit, offset, sortBy)
	}
	if rf, ok := ret.Get(0).(func(*[]int, *[]string, string, string, *int, *int, []struct {
		Field     string
		Direction string
	}) *[]expenses.Expense); ok {
		r0 = rf(productions, months, from, to, limit, offset, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]expenses.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]int, *[]string, string, string, *int, *int, []struct {
		Field     string
		Direction string
	}) *int64); ok {
		r1 = rf(productions, months, from, to, limit, offset, sortBy)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int64)
		}
	}

	if rf, ok := ret.Get(2).(func(*[]int, *[]string, string, string, *int, *int, []struct {
		Field     string
		Direction string
	}) error); ok {
		r2 = rf(productions, months, from, to, limit, offset, sortBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindExpenseById provides a mock function with given fields: id
func (_m *IExpensesRepository) FindExpenseById(id uint) (*expenses.Expense, *[]expenses.ExpenseDoc, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindExpenseById")
	}

	var r0 *expenses.Expense
	var r1 *[]expenses.ExpenseDoc
	var r2 error
	if rf, ok := ret.Get(0).(func(uint) (*expenses.Expense, *[]expenses.ExpenseDoc, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *expenses.Expense); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expenses.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) *[]expenses.ExpenseDoc); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]expenses.ExpenseDoc)
		}
	}

	if rf, ok := ret.Get(2).(func(uint) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateExpense provides a mock function with given fields: e, newDocs, deleteFiles
func (_m *IExpensesRepository) UpdateExpense(e *expenses.Expense, newDocs []expenses.ExpenseDoc, deleteFiles []int) (*expenses.Expense, error) {
	ret := _m.Called(e, newDocs, deleteFiles)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExpense")
	}

	var r0 *expenses.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(*expenses.Expense, []expenses.ExpenseDoc, []int) (*expenses.Expense, error)); ok {
		return rf(e, newDocs, deleteFiles)
	}
	if rf, ok := ret.Get(0).(func(*expenses.Expense, []expenses.ExpenseDoc, []int) *expenses.Expense); ok {
		r0 = rf(e, newDocs, deleteFiles)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*expenses.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(*expenses.Expense, []expenses.ExpenseDoc, []int) error); ok {
		r1 = rf(e, newDocs, deleteFiles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIExpensesRepository creates a new instance of IExpensesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIExpensesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IExpensesRepository {
	mock := &IExpensesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
