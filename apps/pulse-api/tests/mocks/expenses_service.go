// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dtos "selector.dev/pulse/internal/application/dtos"
)

// ExpensesService is an autogenerated mock type for the ExpensesService type
type ExpensesService struct {
	mock.Mock
}

// CreateExpense provides a mock function with given fields: input
func (_m *ExpensesService) CreateExpense(input *dtos.CreateExpenseInput) (*dtos.CreatedOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateExpense")
	}

	var r0 *dtos.CreatedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.CreateExpenseInput) (*dtos.CreatedOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.CreateExpenseInput) *dtos.CreatedOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CreatedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.CreateExpenseInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpense provides a mock function with given fields: id
func (_m *ExpensesService) DeleteExpense(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllExpenses provides a mock function with given fields: input
func (_m *ExpensesService) FindAllExpenses(input *dtos.ExpenseFilterInput) (*dtos.Expenses, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for FindAllExpenses")
	}

	var r0 *dtos.Expenses
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.ExpenseFilterInput) (*dtos.Expenses, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.ExpenseFilterInput) *dtos.Expenses); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Expenses)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.ExpenseFilterInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllExpensesOfCollectionProduction provides a mock function with given fields: input
func (_m *ExpensesService) FindAllExpensesOfCollectionProduction(input *dtos.ProductionCollectionExpenseFilterInput) (*dtos.Expenses, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for FindAllExpensesOfCollectionProduction")
	}

	var r0 *dtos.Expenses
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.ProductionCollectionExpenseFilterInput) (*dtos.Expenses, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.ProductionCollectionExpenseFilterInput) *dtos.Expenses); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Expenses)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.ProductionCollectionExpenseFilterInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindExpenseById provides a mock function with given fields: id
func (_m *ExpensesService) FindExpenseById(id uint) (*dtos.ExpenseDetails, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindExpenseById")
	}

	var r0 *dtos.ExpenseDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*dtos.ExpenseDetails, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *dtos.ExpenseDetails); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ExpenseDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExpense provides a mock function with given fields: input
func (_m *ExpensesService) UpdateExpense(input *dtos.UpdateExpenseInput) (*dtos.UpdatedExpenseOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExpense")
	}

	var r0 *dtos.UpdatedExpenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.UpdateExpenseInput) (*dtos.UpdatedExpenseOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.UpdateExpenseInput) *dtos.UpdatedExpenseOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.UpdatedExpenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.UpdateExpenseInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExpensesService creates a new instance of ExpensesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpensesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpensesService {
	mock := &ExpensesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
