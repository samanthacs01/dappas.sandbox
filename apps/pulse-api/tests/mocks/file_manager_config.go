// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileManagerConfig is an autogenerated mock type for the FileManagerConfig type
type FileManagerConfig struct {
	mock.Mock
}

// GetBasePath provides a mock function with no fields
func (_m *FileManagerConfig) GetBasePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBasePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetBucketName provides a mock function with no fields
func (_m *FileManagerConfig) GetBucketName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBucketName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProjectID provides a mock function with no fields
func (_m *FileManagerConfig) GetProjectID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjectID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRealPath provides a mock function with given fields: internalPath
func (_m *FileManagerConfig) GetRealPath(internalPath string) string {
	ret := _m.Called(internalPath)

	if len(ret) == 0 {
		panic("no return value specified for GetRealPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(internalPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewFileManagerConfig creates a new instance of FileManagerConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileManagerConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileManagerConfig {
	mock := &FileManagerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
