// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	services "selector.dev/pulse/internal/domain/shared/services"
)

// IFilesUploader is an autogenerated mock type for the IFilesUploader type
type IFilesUploader struct {
	mock.Mock
}

// UploadFiles provides a mock function with given fields: t, f
func (_m *IFilesUploader) UploadFiles(t services.FileType, f []*multipart.FileHeader) (*[]services.UploadedFile, error) {
	ret := _m.Called(t, f)

	if len(ret) == 0 {
		panic("no return value specified for UploadFiles")
	}

	var r0 *[]services.UploadedFile
	var r1 error
	if rf, ok := ret.Get(0).(func(services.FileType, []*multipart.FileHeader) (*[]services.UploadedFile, error)); ok {
		return rf(t, f)
	}
	if rf, ok := ret.Get(0).(func(services.FileType, []*multipart.FileHeader) *[]services.UploadedFile); ok {
		r0 = rf(t, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]services.UploadedFile)
		}
	}

	if rf, ok := ret.Get(1).(func(services.FileType, []*multipart.FileHeader) error); ok {
		r1 = rf(t, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFilesUploader creates a new instance of IFilesUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFilesUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFilesUploader {
	mock := &IFilesUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
