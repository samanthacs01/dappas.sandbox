// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dtos "selector.dev/pulse/internal/application/dtos"

	receivables "selector.dev/pulse/internal/domain/receivables"
)

// IInvoicesService is an autogenerated mock type for the IInvoicesService type
type IInvoicesService struct {
	mock.Mock
}

// AcceptGeneratedBills provides a mock function with given fields: input
func (_m *IInvoicesService) AcceptGeneratedBills(input *dtos.AcceptGeneratedBillingInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AcceptGeneratedBills")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.AcceptGeneratedBillingInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateBills provides a mock function with given fields: input
func (_m *IInvoicesService) GenerateBills(input *dtos.GenerateBillsInput) (*[]receivables.DraftInvoice, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBills")
	}

	var r0 *[]receivables.DraftInvoice
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.GenerateBillsInput) (*[]receivables.DraftInvoice, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.GenerateBillsInput) *[]receivables.DraftInvoice); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]receivables.DraftInvoice)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.GenerateBillsInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionRateValues provides a mock function with given fields: start, end
func (_m *IInvoicesService) GetCollectionRateValues(start string, end string) (*[]receivables.ReceivableKpiDetailsItem, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionRateValues")
	}

	var r0 *[]receivables.ReceivableKpiDetailsItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]receivables.ReceivableKpiDetailsItem, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]receivables.ReceivableKpiDetailsItem); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]receivables.ReceivableKpiDetailsItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionWithPaymentTermsValues provides a mock function with given fields: start, end
func (_m *IInvoicesService) GetCollectionWithPaymentTermsValues(start string, end string) (*[]receivables.ReceivableKpiDetailsItem, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetCollectionWithPaymentTermsValues")
	}

	var r0 *[]receivables.ReceivableKpiDetailsItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]receivables.ReceivableKpiDetailsItem, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]receivables.ReceivableKpiDetailsItem); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]receivables.ReceivableKpiDetailsItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerConcentrationValues provides a mock function with given fields: start, end
func (_m *IInvoicesService) GetCustomerConcentrationValues(start string, end string) (*[]receivables.ReceivableKpiDetailsItem, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerConcentrationValues")
	}

	var r0 *[]receivables.ReceivableKpiDetailsItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]receivables.ReceivableKpiDetailsItem, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]receivables.ReceivableKpiDetailsItem); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]receivables.ReceivableKpiDetailsItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoices provides a mock function with given fields: input
func (_m *IInvoicesService) GetInvoices(input *dtos.ListWithFilterInput) (*dtos.Invoices, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoices")
	}

	var r0 *dtos.Invoices
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.ListWithFilterInput) (*dtos.Invoices, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.ListWithFilterInput) *dtos.Invoices); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Invoices)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.ListWithFilterInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKpiByDateRange provides a mock function with given fields: from, to
func (_m *IInvoicesService) GetKpiByDateRange(from string, to string) (*receivables.ReceivableStats, error) {
	ret := _m.Called(from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetKpiByDateRange")
	}

	var r0 *receivables.ReceivableStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*receivables.ReceivableStats, error)); ok {
		return rf(from, to)
	}
	if rf, ok := ret.Get(0).(func(string, string) *receivables.ReceivableStats); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*receivables.ReceivableStats)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalOutstandingValues provides a mock function with given fields: start, end
func (_m *IInvoicesService) GetTotalOutstandingValues(start string, end string) (*[]receivables.ReceivableKpiDetailsItem, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalOutstandingValues")
	}

	var r0 *[]receivables.ReceivableKpiDetailsItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]receivables.ReceivableKpiDetailsItem, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]receivables.ReceivableKpiDetailsItem); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]receivables.ReceivableKpiDetailsItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalOverdueValues provides a mock function with given fields: start, end
func (_m *IInvoicesService) GetTotalOverdueValues(start string, end string) (*[]map[string]interface{}, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalOverdueValues")
	}

	var r0 *[]map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]map[string]interface{}, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]map[string]interface{}); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterPayment provides a mock function with given fields: input
func (_m *IInvoicesService) RegisterPayment(input *dtos.RegisterPaymentInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for RegisterPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.RegisterPaymentInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIInvoicesService creates a new instance of IInvoicesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIInvoicesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IInvoicesService {
	mock := &IInvoicesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
