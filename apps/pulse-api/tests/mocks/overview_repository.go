// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	overview "selector.dev/pulse/internal/domain/overview"
)

// IOverviewRepository is an autogenerated mock type for the IOverviewRepository type
type IOverviewRepository struct {
	mock.Mock
}

// GetOverviewStackStatsKpiDetails provides a mock function with given fields: statType, start, end
func (_m *IOverviewRepository) GetOverviewStackStatsKpiDetails(statType string, start string, end string) ([]map[string]interface{}, error) {
	ret := _m.Called(statType, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetOverviewStackStatsKpiDetails")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]map[string]interface{}, error)); ok {
		return rf(statType, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []map[string]interface{}); ok {
		r0 = rf(statType, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(statType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverviewStatsKpi provides a mock function with given fields: start, end
func (_m *IOverviewRepository) GetOverviewStatsKpi(start string, end string) (*overview.OverviewStats, error) {
	ret := _m.Called(start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetOverviewStatsKpi")
	}

	var r0 *overview.OverviewStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*overview.OverviewStats, error)); ok {
		return rf(start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string) *overview.OverviewStats); ok {
		r0 = rf(start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overview.OverviewStats)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverviewStatsKpiDetails provides a mock function with given fields: statType, start, end
func (_m *IOverviewRepository) GetOverviewStatsKpiDetails(statType string, start string, end string) ([]overview.OverviewKpiDetailsItem, error) {
	ret := _m.Called(statType, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetOverviewStatsKpiDetails")
	}

	var r0 []overview.OverviewKpiDetailsItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]overview.OverviewKpiDetailsItem, error)); ok {
		return rf(statType, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []overview.OverviewKpiDetailsItem); ok {
		r0 = rf(statType, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]overview.OverviewKpiDetailsItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(statType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverviewStatsKpiDetailsWithCompose provides a mock function with given fields: statType, start, end
func (_m *IOverviewRepository) GetOverviewStatsKpiDetailsWithCompose(statType string, start string, end string) ([]overview.OverviewKpiDetailsItemWithComposeValue, error) {
	ret := _m.Called(statType, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetOverviewStatsKpiDetailsWithCompose")
	}

	var r0 []overview.OverviewKpiDetailsItemWithComposeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]overview.OverviewKpiDetailsItemWithComposeValue, error)); ok {
		return rf(statType, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []overview.OverviewKpiDetailsItemWithComposeValue); ok {
		r0 = rf(statType, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]overview.OverviewKpiDetailsItemWithComposeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(statType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOverviewRepository creates a new instance of IOverviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOverviewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOverviewRepository {
	mock := &IOverviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
