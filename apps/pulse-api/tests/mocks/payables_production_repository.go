// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	payables "selector.dev/pulse/internal/domain/payables"

	shared "selector.dev/pulse/internal/domain/shared"
)

// IProductionsRepository is an autogenerated mock type for the IProductionsRepository type
type IProductionsRepository struct {
	mock.Mock
}

// CreateProduction provides a mock function with given fields: production
func (_m *IProductionsRepository) CreateProduction(production *payables.Production) (*payables.Production, error) {
	ret := _m.Called(production)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduction")
	}

	var r0 *payables.Production
	var r1 error
	if rf, ok := ret.Get(0).(func(*payables.Production) (*payables.Production, error)); ok {
		return rf(production)
	}
	if rf, ok := ret.Get(0).(func(*payables.Production) *payables.Production); ok {
		r0 = rf(production)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payables.Production)
		}
	}

	if rf, ok := ret.Get(1).(func(*payables.Production) error); ok {
		r1 = rf(production)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductionByID provides a mock function with given fields: id
func (_m *IProductionsRepository) DeleteProductionByID(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductionByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllProductions provides a mock function with given fields: search, limit, offset, sorts
func (_m *IProductionsRepository) FindAllProductions(search *string, limit *int, offset *int, sorts []struct {
	Field     string
	Direction string
}) (*[]payables.ProductionListItem, *int64, error) {
	ret := _m.Called(search, limit, offset, sorts)

	if len(ret) == 0 {
		panic("no return value specified for FindAllProductions")
	}

	var r0 *[]payables.ProductionListItem
	var r1 *int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) (*[]payables.ProductionListItem, *int64, error)); ok {
		return rf(search, limit, offset, sorts)
	}
	if rf, ok := ret.Get(0).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) *[]payables.ProductionListItem); ok {
		r0 = rf(search, limit, offset, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]payables.ProductionListItem)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) *int64); ok {
		r1 = rf(search, limit, offset, sorts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int64)
		}
	}

	if rf, ok := ret.Get(2).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) error); ok {
		r2 = rf(search, limit, offset, sorts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllProductionsAsNomenclator provides a mock function with no fields
func (_m *IProductionsRepository) FindAllProductionsAsNomenclator() (*[]shared.Nomenclator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllProductionsAsNomenclator")
	}

	var r0 *[]shared.Nomenclator
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]shared.Nomenclator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]shared.Nomenclator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]shared.Nomenclator)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductionByID provides a mock function with given fields: id
func (_m *IProductionsRepository) FindProductionByID(id uint) (*payables.Production, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindProductionByID")
	}

	var r0 *payables.Production
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*payables.Production, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *payables.Production); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payables.Production)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductionDetailsStatsKpiDetails provides a mock function with given fields: id, statType, start, end
func (_m *IProductionsRepository) GetProductionDetailsStatsKpiDetails(id uint, statType string, start string, end string) ([]payables.PayablesKpiDetailsItem, error) {
	ret := _m.Called(id, statType, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetProductionDetailsStatsKpiDetails")
	}

	var r0 []payables.PayablesKpiDetailsItem
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string, string) ([]payables.PayablesKpiDetailsItem, error)); ok {
		return rf(id, statType, start, end)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string, string) []payables.PayablesKpiDetailsItem); ok {
		r0 = rf(id, statType, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]payables.PayablesKpiDetailsItem)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string, string, string) error); ok {
		r1 = rf(id, statType, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductionStatsKpi provides a mock function with given fields: id, start, end
func (_m *IProductionsRepository) GetProductionStatsKpi(id uint, start string, end string) (payables.ProductionStats, error) {
	ret := _m.Called(id, start, end)

	if len(ret) == 0 {
		panic("no return value specified for GetProductionStatsKpi")
	}

	var r0 payables.ProductionStats
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string, string) (payables.ProductionStats, error)); ok {
		return rf(id, start, end)
	}
	if rf, ok := ret.Get(0).(func(uint, string, string) payables.ProductionStats); ok {
		r0 = rf(id, start, end)
	} else {
		r0 = ret.Get(0).(payables.ProductionStats)
	}

	if rf, ok := ret.Get(1).(func(uint, string, string) error); ok {
		r1 = rf(id, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduction provides a mock function with given fields: id, updateData
func (_m *IProductionsRepository) UpdateProduction(id uint, updateData *payables.ProductionUpdateData) error {
	ret := _m.Called(id, updateData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *payables.ProductionUpdateData) error); ok {
		r0 = rf(id, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIProductionsRepository creates a new instance of IProductionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductionsRepository {
	mock := &IProductionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
