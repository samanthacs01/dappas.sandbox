// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dtos "selector.dev/pulse/internal/application/dtos"
)

// ProductionService is an autogenerated mock type for the ProductionService type
type ProductionService struct {
	mock.Mock
}

// CreateProduction provides a mock function with given fields: input
func (_m *ProductionService) CreateProduction(input *dtos.CreateProductionInput) (*dtos.CreatedOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduction")
	}

	var r0 *dtos.CreatedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.CreateProductionInput) (*dtos.CreatedOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.CreateProductionInput) *dtos.CreatedOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CreatedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.CreateProductionInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduction provides a mock function with given fields: id
func (_m *ProductionService) DeleteProduction(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductionByID provides a mock function with given fields: id
func (_m *ProductionService) GetProductionByID(id uint) (*dtos.ProductionResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductionByID")
	}

	var r0 *dtos.ProductionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*dtos.ProductionResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *dtos.ProductionResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ProductionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductions provides a mock function with given fields: input
func (_m *ProductionService) GetProductions(input dtos.ProductionsFilterInput) (*dtos.Productions, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetProductions")
	}

	var r0 *dtos.Productions
	var r1 error
	if rf, ok := ret.Get(0).(func(dtos.ProductionsFilterInput) (*dtos.Productions, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(dtos.ProductionsFilterInput) *dtos.Productions); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Productions)
		}
	}

	if rf, ok := ret.Get(1).(func(dtos.ProductionsFilterInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductionsAsNomenclator provides a mock function with no fields
func (_m *ProductionService) GetProductionsAsNomenclator() (*dtos.Nomenclators, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProductionsAsNomenclator")
	}

	var r0 *dtos.Nomenclators
	var r1 error
	if rf, ok := ret.Get(0).(func() (*dtos.Nomenclators, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *dtos.Nomenclators); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Nomenclators)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduction provides a mock function with given fields: input
func (_m *ProductionService) UpdateProduction(input *dtos.UpdateProductionInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.UpdateProductionInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductionService creates a new instance of ProductionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductionService {
	mock := &ProductionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
