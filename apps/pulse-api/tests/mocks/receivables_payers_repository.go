// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	receivables "selector.dev/pulse/internal/domain/receivables"
	shared "selector.dev/pulse/internal/domain/shared"
)

// IPayersRepository is an autogenerated mock type for the IPayersRepository type
type IPayersRepository struct {
	mock.Mock
}

// CreatePayer provides a mock function with given fields: payer
func (_m *IPayersRepository) CreatePayer(payer *receivables.Payer) (*receivables.Payer, error) {
	ret := _m.Called(payer)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayer")
	}

	var r0 *receivables.Payer
	var r1 error
	if rf, ok := ret.Get(0).(func(*receivables.Payer) (*receivables.Payer, error)); ok {
		return rf(payer)
	}
	if rf, ok := ret.Get(0).(func(*receivables.Payer) *receivables.Payer); ok {
		r0 = rf(payer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*receivables.Payer)
		}
	}

	if rf, ok := ret.Get(1).(func(*receivables.Payer) error); ok {
		r1 = rf(payer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePayer provides a mock function with given fields: id
func (_m *IPayersRepository) DeletePayer(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePayer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllPayers provides a mock function with given fields: search, limit, offset, sorts
func (_m *IPayersRepository) FindAllPayers(search *string, limit *int, offset *int, sorts []struct {
	Field     string
	Direction string
}) (*[]receivables.Payer, *int64, error) {
	ret := _m.Called(search, limit, offset, sorts)

	if len(ret) == 0 {
		panic("no return value specified for FindAllPayers")
	}

	var r0 *[]receivables.Payer
	var r1 *int64
	var r2 error
	if rf, ok := ret.Get(0).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) (*[]receivables.Payer, *int64, error)); ok {
		return rf(search, limit, offset, sorts)
	}
	if rf, ok := ret.Get(0).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) *[]receivables.Payer); ok {
		r0 = rf(search, limit, offset, sorts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]receivables.Payer)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) *int64); ok {
		r1 = rf(search, limit, offset, sorts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*int64)
		}
	}

	if rf, ok := ret.Get(2).(func(*string, *int, *int, []struct {
		Field     string
		Direction string
	}) error); ok {
		r2 = rf(search, limit, offset, sorts)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllPayersAsNomenclator provides a mock function with no fields
func (_m *IPayersRepository) FindAllPayersAsNomenclator() (*[]shared.Nomenclator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAllPayersAsNomenclator")
	}

	var r0 *[]shared.Nomenclator
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]shared.Nomenclator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]shared.Nomenclator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]shared.Nomenclator)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPayerByID provides a mock function with given fields: id
func (_m *IPayersRepository) FindPayerByID(id uint) (*receivables.Payer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindPayerByID")
	}

	var r0 *receivables.Payer
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*receivables.Payer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *receivables.Payer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*receivables.Payer)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayer provides a mock function with given fields: payer
func (_m *IPayersRepository) UpdatePayer(payer *receivables.Payer) (*receivables.Payer, error) {
	ret := _m.Called(payer)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayer")
	}

	var r0 *receivables.Payer
	var r1 error
	if rf, ok := ret.Get(0).(func(*receivables.Payer) (*receivables.Payer, error)); ok {
		return rf(payer)
	}
	if rf, ok := ret.Get(0).(func(*receivables.Payer) *receivables.Payer); ok {
		r0 = rf(payer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*receivables.Payer)
		}
	}

	if rf, ok := ret.Get(1).(func(*receivables.Payer) error); ok {
		r1 = rf(payer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPayersRepository creates a new instance of IPayersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPayersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPayersRepository {
	mock := &IPayersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
