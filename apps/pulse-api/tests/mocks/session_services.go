// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	shared "selector.dev/pulse/internal/domain/shared"
)

// ISessionServices is an autogenerated mock type for the ISessionServices type
type ISessionServices struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: email, password
func (_m *ISessionServices) Authenticate(email string, password string) (*shared.Session, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *shared.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*shared.Session, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *shared.Session); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserId provides a mock function with no fields
func (_m *ISessionServices) GetUserId() *uint {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserId")
	}

	var r0 *uint
	if rf, ok := ret.Get(0).(func() *uint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uint)
		}
	}

	return r0
}

// Logout provides a mock function with given fields: token
func (_m *ISessionServices) Logout(token string) error {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyToken provides a mock function with given fields: token, userId
func (_m *ISessionServices) VerifyToken(token string, userId uint) bool {
	ret := _m.Called(token, userId)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, uint) bool); ok {
		r0 = rf(token, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewISessionServices creates a new instance of ISessionServices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISessionServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISessionServices {
	mock := &ISessionServices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
