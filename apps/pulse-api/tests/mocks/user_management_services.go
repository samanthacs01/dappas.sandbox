// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	shared "selector.dev/pulse/internal/domain/shared"

	user "selector.dev/pulse/internal/domain/user"
)

// IUserManagement is an autogenerated mock type for the IUserManagement type
type IUserManagement struct {
	mock.Mock
}

// ActivateUser provides a mock function with given fields: token, password
func (_m *IUserManagement) ActivateUser(token string, password string) error {
	ret := _m.Called(token, password)

	if len(ret) == 0 {
		panic("no return value specified for ActivateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(token, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *IUserManagement) FindUserByEmail(email string) (*user.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*user.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *user.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: password
func (_m *IUserManagement) GenerateToken(password string) (*string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteNewUser provides a mock function with given fields: email, name, entity, role, tokens
func (_m *IUserManagement) InviteNewUser(email string, name string, entity *uint, role shared.Role, tokens map[string]string) error {
	ret := _m.Called(email, name, entity, role, tokens)

	if len(ret) == 0 {
		panic("no return value specified for InviteNewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *uint, shared.Role, map[string]string) error); ok {
		r0 = rf(email, name, entity, role, tokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecoveryPassword provides a mock function with given fields: email
func (_m *IUserManagement) RecoveryPassword(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for RecoveryPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEmailInvitation provides a mock function with given fields: token, email, role, tokens
func (_m *IUserManagement) SendEmailInvitation(token string, email string, role shared.Role, tokens map[string]string) error {
	ret := _m.Called(token, email, role, tokens)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailInvitation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, shared.Role, map[string]string) error); ok {
		r0 = rf(token, email, role, tokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserManagement creates a new instance of IUserManagement. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserManagement(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserManagement {
	mock := &IUserManagement{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
