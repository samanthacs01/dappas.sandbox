// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dtos "selector.dev/pulse/internal/application/dtos"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: input
func (_m *IUserService) CreateUser(input *dtos.CreateUserInput) (*dtos.CreatedOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *dtos.CreatedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.CreateUserInput) (*dtos.CreatedOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.CreateUserInput) *dtos.CreatedOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CreatedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.CreateUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: id
func (_m *IUserService) DeleteUser(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserById provides a mock function with given fields: id
func (_m *IUserService) GetUserById(id uint) (*dtos.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *dtos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*dtos.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *dtos.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: input
func (_m *IUserService) GetUsers(input *dtos.UserFilterInput) (*dtos.Users, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 *dtos.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.UserFilterInput) (*dtos.Users, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.UserFilterInput) *dtos.Users); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.UserFilterInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendEmail provides a mock function with given fields: id
func (_m *IUserService) ResendEmail(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ResendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: input
func (_m *IUserService) UpdateUser(input *dtos.UpdateUserInput) (*dtos.User, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *dtos.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.UpdateUserInput) (*dtos.User, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*dtos.UpdateUserInput) *dtos.User); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.UpdateUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
